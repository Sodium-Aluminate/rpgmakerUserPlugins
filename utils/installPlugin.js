#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const INSTALL_FLAG_START = "__RPGMAKER_USER_PLUGIN_REGISTER_START__"
const INSTALL_FLAG_END = "__RPGMAKER_USER_PLUGIN_REGISTER_END__"

function errorExit(str) {
	console.error(str)
	process.exit(1)
}

if (require('os').hostname() !== "bwrap") errorExit(`don't run this script, use "installPlugin.sh".`)

const pluginJsFilePath = (() => {
	function existsSync(f) {
		try {
			fs.accessSync(f);
			return true
		} catch (ignored) {}
		return false
	}

	const targetJsFile = process.argv[2];
	if (!targetJsFile)
		errorExit('expected install dist');
	if (!existsSync(targetJsFile) && fs.statSync(targetJsFile).isFile())
		errorExit(`not a file: ${JSON.stringify(targetJsFile)}`)

	return targetJsFile
})()


const [pluginMaps, pluginSrcCleared] = (() => {
	let code = fs.readFileSync(pluginJsFilePath, 'utf8')

	code = code.replaceAll(new RegExp(`
+//${INSTALL_FLAG_START}
[\\s\\S]*
//${INSTALL_FLAG_END}\n?`, "g"
	), "\n")

	new Function(code + `;globalThis.$plugins = $plugins`)();

	let map = {}
	for (let pluginData of $plugins) {
		map[String(pluginData.name)] = pluginData
	}
	return [map, code];
})();

const pluginsToInstall = fs.readdirSync(path.join(__dirname, "../build")).filter(s => s.endsWith(".js")).map(s => s.replace(/\.js$/, ""));

pluginsToInstall.sort((a, b) => {
	const liba = a.startsWith('lib')
	if (liba === b.startsWith('lib')) return a.localeCompare(b)
	return liba ? -1 : 1	
});

(() => {
	const lowerCasePluginMap = {}
	for (let name in pluginMaps) {
		lowerCasePluginMap[name.toLowerCase()] = pluginMaps[name]
	}
	let conflicts = pluginsToInstall.filter(pluginName => Object.hasOwn(lowerCasePluginMap, pluginName.toLowerCase()));
	if (conflicts.length !== 0)
		errorExit(`can't install due name conflict(s): \n` +
			conflicts.map(name => {
				const oldName = lowerCasePluginMap[name.toLowerCase()].name
				if (oldName === name) return JSON.stringify(name)
				return `${JSON.stringify(name)} (exist plugin: ${JSON.stringify(oldName)})`
			}).join("\n")
		)
})()

fs.writeFileSync(pluginJsFilePath, `${pluginSrcCleared}
//${INSTALL_FLAG_START}
// generated by installation script. remove the comment will break the update conflict detect.
;$plugins.push(...${JSON.stringify(pluginsToInstall, null, "\t")}.map(name => ({name, status: true, description: "", parameters: {}})))
//${INSTALL_FLAG_END}
`, "utf-8")